Initially, our project had four shift/reduce conflicts in the yacc file. The first of these conflicts was caused by a typo in the second production of the Call nonterminal. The production was erroneously producing a left bracket, an Actual nonterminal and another left bracket. This was easily fixed by correcting the typo to produce the correct right brace token. The next shift reduce conflict was due to the If Stmt nonterminal. This nonterminal was responsible for parsing an if statement or an if else statement. This was resolved by creating two nonassociated tokens at the top of the yacc file which we called IFONLY and _else. We then placed “%prec IFONLY” at the end of the production that created the if statement and the _else token at the end of the production that would produce the if else clause. The assigned precedence to the productions so yacc would no longer run into a shift/reduce conflict here. 
        The next two shift/reduce conflicts were not resolved. In the LValue nonterminal, the grammar cannot choose between the two productions that each create another left recursive LValue. We attempted to create a nonassoc token like the if else statement to resolve the problem but the problem persisted. We also tried rewriting the grammar to go to another nonterminal LvalueX to try and remove the ambiguity. The last shift/reduce conflict was in the